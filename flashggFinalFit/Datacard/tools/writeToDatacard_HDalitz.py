# Hold defs of writing functions for datacard
import os, sys, re
from commonTools_HDalitz import *
import pandas as pd
# from commonObjects import *


#! change proc -> procdatacard
#! systematic

def writePreamble(f):
    f.write("CMS HLLG Datacard\n") 
    f.write("Auto-generated by flashggFinalFits/Datacard/makeDatacard_HDalitz.py\n")
    f.write("Run with: combine\n")
    f.write("---------------------------------------------------------------------------------------------------------------------------------\n")
    f.write("imax 1   number of channels\n")
    f.write("jmax *   number of backgrounds\n")
    f.write("kmax *   number of nuisance parameters (sources of systematic uncertainty)\n")
    f.write("---------------------------------------------------------------------------------------------------------------------------------\n")
    return True

def writeProcesses(f, df, cat, mass, outdir = "./electron"): # df = Pandas DataFrame
    # Shapes
    # Loop over categories in dataframe
    for ir, r in df[df["cat"] == cat].iterrows():
        if ((r["mass"] != str(mass)) and (r["mass"] != "-")):
            continue

        #! becareful to the models' path
        if outdir != "none":
            relative_path = "../{}".format(r["modelWSFile"])
        f.write("shapes   {:15} {:18} {}   {}\n".format(r["proc"], r["cat"], relative_path, r["model"]))

    # Bin, observation and rate lines
    lbreak = "----------------------------------------------------------------------------------------------------------------------------------"
    lbin_cat = "{:38}".format("bin") 
    lobs_cat = "{:38}".format("observation")
    lbin_procXcat = "{:38}".format("bin")
    lproc = "{:38}".format("process") 
    lprocid = "{:38}".format("process") 
    lrate = "{:38}".format("rate")        
    # Loop over categories
    lbin_cat += "{:17}".format(cat)
    lobs_cat += "{:17}".format("-1")
    sigID = 0
    # Loop over rows for respective category
    for ir,r in df[df["cat"] == cat].iterrows():
        if (r["proc"] == "data_obs"): 
            continue
        if ((r["mass"] != str(mass)) and (r["mass"] != "-")):
            continue
        lbin_procXcat += "{:17}".format(cat)
        lproc += "{:17}".format(r["proc"])
        if r["proc"] == "bkg_mass": 
            lprocid += "{:17}".format("1")
        else:
            lprocid += "{:17}".format(str(sigID))
            sigID -= 1
        if r["nominal_yield"] == "-": 
            bkgrate = str(round(1.0, 1))
            lrate += "{:17}".format(bkgrate)
        else: 
            sigrate = str(round(r["nominal_yield"], 7))
            lrate += "{:17}".format(sigrate)
    # Remove final space from lines and add to file
    for l in [lbreak, lbin_cat, lobs_cat, lbreak, lbin_procXcat, lproc, lprocid, lrate, lbreak]: 
        l = l[:-1]
        f.write("%s\n" %l)

    return True

# l-systematic line, v-value, s-systematic title, p-proc, c-cat
def addSyst(l, v):
    l += "{:15}  ".format(v)
    return l

def writeSystematic(f, df, s, cat, mass, years = [2016, 2017, 2018]): #! FIXEDME

    df_iter = pd.DataFrame()
    if ((s["name"] == "CMS_JEC_13TeV") or (s["name"] == "CMS_JER_13TeV")):
        df_iter = df[(df["cat"] == cat)&((df["cat"].str.contains("VBF"))|(df["year"].str.contains("merged")))]
        if not pd.Series(cat).str.contains("VBF")[0]:
            return True
    elif (s["name"] == "CMS_R9_13TeV"):
        df_iter = df[(df["cat"] == cat)&((df["cat"].str.contains("R9"))|(df["year"].str.contains("merged")))]
        if not pd.Series(cat).str.contains("R9")[0]:
            return True
    else:
        df_iter = df[df["cat"] == cat]

    if (s["yearsDependence"] == 1):
        for i, y in enumerate(years):
            stitle = "{}_{}".format(s["name"], y)
            lsyst = "{:30}{:8}".format(stitle, s["prior"])
            for ir, r in df_iter.iterrows():
                if r["proc"] == "data_obs": 
                    continue
                if ((r["mass"] != str(mass)) and (r["mass"] != "-")):
                    continue

                sval = r[stitle]
                lsyst = addSyst(lsyst, sval)
            
            f.write("{}\n".format(lsyst[:-1]))

    else:
        stitle = s["name"]
        lsyst = "{:30}{:8}".format(stitle, s["prior"])
        for ir, r in df_iter.iterrows():
            if r["proc"] == "data_obs": 
                continue
            if ((r["mass"] != str(mass)) and (r["mass"] != "-")):
                continue

            sval = r[stitle]
            lsyst = addSyst(lsyst, sval)
        
        f.write("{}\n".format(lsyst[:-1]))

    return True

def writeParamSystematic(f, df, cat, mass):
    f.write("\n")
    for ir, r in df[df["cat"] == cat].iterrows():
            if (r["mass"] != str(mass)):
                continue
            scaleName = "CMS_heeg_scale_{}_{}_{}".format(r["procOriginal"], r["year"], cat)
            f.write("{:45}{:10}{:5}{:5}\n".format(scaleName, "param", str(1), str(round(0.03, 7)))) #! FIXEDME
        
    for ir, r in df[df["cat"] == cat].iterrows():
        if (r["mass"] != str(mass)):
            continue
        resName = "CMS_heeg_res_{}_{}_{}".format(r["procOriginal"], r["year"], cat)
        f.write("{:45}{:10}{:5}{:5}\n".format(resName, "param", str(1), str(round(0.03, 7)))) #! FIXEDME
    
    return True

def writePdfIndex(f, df, cat, ext = "DiPho_13TeV"):
    f.write("\n")

    # indexStr should be the same as the name of pdfindex in background model's root file
    indexStr = "pdfindex_{}_cat{}_{}".format(cat, catNumMap[cat], ext)
    f.write("%-15s  discrete \n" %indexStr)
    return True

def writeBreak(f):
    lbreak = "----------------------------------------------------------------------------------------------------------------------------------"
    f.write("%s\n" %lbreak)